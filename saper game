import tkinter as tk 
from random import shuffle 
from tkinter.messagebox import showinfo

colors = { 
    0 : 'white', 
    1 : 'green', 
    2 : 'red', 
    3 : 'blue', 
}

class MyButton(tk.Button): 
    def __init__(self, master, x, y, number=0, *args, **kwargs): 
        super().__init__(master, *args, **kwargs) 
        self.x = x 
        self.y = y 
        self.number = number 
        self.is_mine = False 
        self.count_bomb = 0 
        self.is_open = False 
        self.is_game_over = False  # Переместил сюда

    def __repr__(self): 
        return f'MyButton, {self.x} {self.y} {self.number} {self.is_mine}' 

class MineSwepper: 
    r = tk.Tk() 
    row = 7 
    columns = 10 
    mines = 10 
    is_first_click = True 

    def __init__(self): 
        self.buttons = [] 
        for i in range(self.row+2): 
            temp = [] 
            for j in range(self.columns+2): 
                btn = MyButton(self.r, x=i, y=j, command=self.click, width=3, font='Calibri 15 bold') 
                btn.config(command=lambda button=btn: self.click(button)) 
                temp.append(btn) 
            self.buttons.append(temp)

    def click(self, clicked_button: MyButton): 
        if self.is_first_click: 
            self.insert_mines(clicked_button.number) 
            self.count_mines_in_buttons() 
            self.print_buttons() 
            self.is_first_click = False

        if clicked_button.is_mine: 
            clicked_button.config(text="*", background='#8B0000', disabledforeground='yellow') 
            clicked_button.is_open = True 
            self.is_game_over = True 
            showinfo('Game over', 'Вы проиграли!') 
            for i in range(1, self.row+1): 
                for j in range(1, self.columns+1): 
                    btn = self.buttons[i][j] 
                    if btn.is_mine: 
                        btn['text'] = '*'
        else: 
            color = colors.get(clicked_button.count_bomb, 'purple') 
            if clicked_button.count_bomb: 
                clicked_button.config(text=clicked_button.count_bomb, disabledforeground=color) 
                clicked_button.is_open = True
            else: 
                self.breadth_first_search(clicked_button) 
                clicked_button.config(text=' ', disabledforeground=color) 
                clicked_button.config(state='disabled') 
                clicked_button.config(relief=tk.SUNKEN)

    def breadth_first_search(self, btn: MyButton): 
        queue = [btn] 
        while queue:
            cur_btn = queue.pop() 
            color = colors.get(cur_btn, 'purple') 
            if cur_btn.count_bomb:
                cur_btn.config(text=cur_btn.count_bomb, disabledforeground=color) 
            else: 
                cur_btn.config(text=' ', disabledforeground=color) 
            cur_btn.is_open = True 
            cur_btn.config(state='disabled') 
            cur_btn.config(relief=tk.SUNKEN)            
            if cur_btn.count_bomb == 0: 
                x, y = cur_btn.x, cur_btn.y 
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]: 
                        if not abs(dx - dy) == 1: 
                            continue 
                        next_btn = self.buttons[x + dx][y + dy]

                        if not next_btn.is_open and 1 <= next_btn.x <= self.row and 1 <= next_btn.y <=  self.columns and next_btn not in queue: 
                            queue.append(next_btn)

    def create_widgets(self): 
        count = 1 
        for i in range(1, self.row+1):
            for j in range(1, self.columns+1):
                btn = self.buttons[i][j] 
                btn.number = count 
                btn.grid(row=i, column=j) 
                count += 1

    def open_all_buttons(self): 
        for i in range(self.row+2):
            for j in range(self.columns+2):
                btn = self.buttons[i][j] 
                if btn.is_mine:
                    btn.config(text="*", background='#8B0000', disabledforeground='yellow') 
                elif btn.count_bomb == 1: 
                    btn.config(text=btn.count_bomb, fg='green') 
                elif btn.count_bomb == 2: 
                    btn.config(text=btn.count_bomb, fg='red') 
                elif btn.count_bomb == 3: 
                    btn.config(text=btn.count_bomb, fg='blue') 
                else: 
                    btn.config(text=btn.count_bomb, disabledforeground='purple')

    def print_buttons(self): 
        for i in range(1, self.row+1): 
            for j in range(1, self.columns+1): 
                btn = self.buttons[i][j] 
                if btn.is_mine: 
                    print('B', end=' ') 
                else: 
                    print(btn.count_bomb, end=' ') 

    def insert_mines(self, number: int): 
        a_mines = self.get_mines_place(number) 
        print(a_mines) 
        for i in range(1, self.row+1): 
            for j in range(1, self.columns+1): 
                btn = self.buttons[i][j] 
                if btn.number in a_mines: 
                    btn.is_mine = True

    def count_mines_in_buttons(self): 
        for i in range(1, self.row+1): 
            for j in range(1, self.columns+1): 
                btn = self.buttons[i][j] 
                count_bomb = 0 
                if not btn.is_mine: 
                    for row_dx in [-1, 0, 1]: 
                        for col_dx in [-1, 0, 1]: 
                            neighbour = self.buttons[i + row_dx][j + col_dx] 
                            if neighbour.is_mine: 
                                count_bomb += 1 
                                btn.count_bomb = count_bomb

    @staticmethod 
    def get_mines_place(exclude_number: int):
        a = list(range(1, MineSwepper.row * MineSwepper.columns + 1)) 
        print(f'Исключем кнопку номер {exclude_number}') 
        a.remove(exclude_number) 
        shuffle(a) 
        return a[:MineSwepper.mines]

    def start(self): 
        self.create_widgets() 
        #self.open_all_buttons() 
        self.r.mainloop() 

game = MineSwepper() 
game.start() 
